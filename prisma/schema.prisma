generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Collection {
  id        BigInt           @id @default(sequence())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  slug      String           @unique
  types     CollectionType[]
  parentId  BigInt?
  parent    Collection?      @relation(name: "ParentChild", fields: [parentId], references: [id])
  children  Collection[]     @relation(name: "ParentChild")
  products  Product[]
}

model Product {
  id           BigInt           @id @default(sequence())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String
  description  String
  price        Float
  rate         Float
  published    Boolean          @default(false)
  images       ProductImage[]
  colors       ProductColor[]
  sizes        ProductSize[]
  types        CollectionType[]
  collection   Collection       @relation(fields: [collectionId], references: [id])
  collectionId BigInt
}

model ProductImage {
  id        BigInt   @id @default(sequence())
  imageURL  String
  imageBlur String
  Product   Product? @relation(fields: [productId], references: [id])
  productId BigInt?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  oauth_token              String? // Twitter
  oauth_token_secret       String? // Twitter
  expires_at               Int?
  refresh_token_expires_in Int? // Github
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CollectionType {
  MEN
  WOMEN
}

enum ProductSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductColor {
  BLACK
  WHITE
  GRAY
  RED
  ORANGE
  YELLOW
  GREEN
  PINK
  BLUE
  PURPLE
}
